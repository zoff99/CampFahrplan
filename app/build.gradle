import nerd.tuxmobil.fahrplan.congress.Android
import nerd.tuxmobil.fahrplan.congress.Libs
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

ext.set("APP_VERSION", "${gitSha()}")

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "org.sonarqube"
apply from: "../sonarqube.gradle"

Properties props = new Properties()
File gradlePropertiesFile = file("gradle.properties")
if (!gradlePropertiesFile.exists()) {
    throw new IllegalStateException(
            "Please create the file 'gradle.properties' before " +
                    "importing the project. Do not forget to add custom values!"
    )
}
props.load(new FileInputStream(gradlePropertiesFile))

android {
    compileSdkVersion Android.compileSdkVersion
    buildToolsVersion Android.buildToolsVersion

    defaultConfig {
        versionCode 10001
        versionName "1.0.1"
        minSdkVersion Android.minSdkVersion
        targetSdkVersion Android.targetSdkVersion
        archivesBaseName = "Fahrplan-$versionName"

        // Build information
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""
        buildConfigField "String", "C3NAV_URL", "\"https://tox.zoff.cc//\""
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            zipAlignEnabled true
            debuggable true
        }
        release {
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules/proguard-project.txt',
                    'proguard-rules/okhttp3.pro',
                    'proguard-rules/okio.pro'
        }
    }

    signingConfigs {
    }

    def defaultDimension = "default"
    flavorDimensions defaultDimension

    productFlavors {
        toxcon2019 {
            dimension defaultDimension
            applicationId "com.zoffcc.fahrplan.toxcon"
            buildConfigField "String", "SCHEDULE_URL", '"https://pretalx.tox.zoff.cc/toxcon2019/schedule/export/schedule.xml"'
            buildConfigField "String", "EVENT_URL", '"https://pretalx.tox.zoff.cc/toxcon2019/event/%1$s.html"'
            buildConfigField "String", "SERVER_BACKEND_TYPE", '"pretalx"'
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_YEAR", "2019"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_MONTH", "10"
            buildConfigField "int", "SCHEDULE_FIRST_DAY_START_DAY", "11"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_YEAR", "2019"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_MONTH", "10"
            buildConfigField "int", "SCHEDULE_LAST_DAY_END_DAY", "13"
            buildConfigField "boolean", "SHOW_APP_DISCLAIMER", "false"
            buildConfigField "boolean", "ENGAGE_C3NAV_APP_INSTALLATION", "false"
            buildConfigField "boolean", "ENGAGE_GOOGLE_BETA_TESTING", "false"
            buildConfigField "boolean", "ENGAGE_GOOGLE_PLAY_RATING", "false"
            buildConfigField "String", "TRACE_DROID_EMAIL_ADDRESS", '"ENTER_EMAIL_ADDRESS_HERE"'
            buildConfigField "String", "SCHEDULE_FEEDBACK_URL", '"https://google.com"'
        }
    }

    lintOptions {
        // for okio - https://github.com/square/okio/issues/58
        warning "InvalidPackage"
        warning "MissingDefaultResource"
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

dependencies {
    implementation project(":database")
    implementation project(":network")

    implementation Libs.kotlinStdlib
    implementation Libs.supportLibraryAppcompatV7
    implementation Libs.supportLibraryDesign
    implementation Libs.okhttp
    implementation Libs.okhttpLoggingInterceptor
    implementation Libs.snackengagePlayrate
    implementation Libs.emailIntentBuilder
    implementation Libs.tracedroid

    testImplementation Libs.junit
    testImplementation Libs.assertjAndroid
    testImplementation Libs.supportLibraryAnnotations
    testImplementation Libs.mockitoCore
    testImplementation Libs.mockitoKotlin
    testImplementation Libs.threeTenBp
}

def gitSha() {
    def res = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    def diff = 'git diff'.execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }
    return res
}

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}
